version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock_postgres_dev
    environment:
      POSTGRES_DB: stock_db
      POSTGRES_USER: stock_user
      POSTGRES_PASSWORD: stock_dev_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stock_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stock_user -d stock_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stock_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # FastAPI Backend (Future)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: stock_backend_dev
    environment:
      - DATABASE_URL=postgresql://stock_user:stock_dev_password@postgres:5432/stock_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - DEBUG_MODE=true
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
    networks:
      - stock_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - backend
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend (Future)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: stock_frontend_dev
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - stock_network
    depends_on:
      - backend
    profiles:
      - frontend
    command: npm run dev

  # Streamlit Legacy App (Current)
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: stock_streamlit_dev
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - USE_CACHE=true
      - CACHE_DURATION_MINUTES=15
      - DEBUG_MODE=true
    ports:
      - "8501:8501"
    volumes:
      - .:/app
      - ./.cache:/app/.cache
    networks:
      - stock_network
    profiles:
      - legacy
    command: streamlit run main.py --server.port=8501 --server.address=0.0.0.0

  # Nginx Reverse Proxy (Future)
  nginx:
    image: nginx:alpine
    container_name: stock_nginx_dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - stock_network
    depends_on:
      - backend
      - frontend
    profiles:
      - full

volumes:
  postgres_data:
  redis_data:

networks:
  stock_network:
    driver: bridge